getwd()
#! /usr/bin/env Rscript
genes <- c('ACTB', 'B2M', 'GAPDH', 'GUSB', 'HPRT1', 'PGK1', 'PPIA', 'RPLP0', 'TBP', 'TFRC')
cellTypes <- c("BRCA", "COAD", "LUAD", "LUSC", "PRAD")
featureCounts <- as.data.frame(read_tsv("../../cancerproject/proj_090817/data/GSM1536837_06_01_15_TCGA_24.tumor_Rsubread_FeatureCounts.txt.gz"))
#column_to_rownames(featureCounts, var = "X1")
rownames(featureCounts) <- featureCounts$X1
featureCounts$X1 <- NULL
#featureCounts$condition <- 'Tumor'
#featureCounts <- t(featureCounts)
cellStates <- data.frame(condition = rep("Tumor", ncol(featureCounts)))
normFeatureCounts <- as.data.frame(read_tsv("../../cancerproject/proj_090817/data/GSM1697009_06_01_15_TCGA_24.normal_Rsubread_FeatureCounts.txt.gz"))
rownames(normFeatureCounts) <- normFeatureCounts$X1
normFeatureCounts$X1 <- NULL
#normFeatureCounts$condition <- 'Normal'
cellStates <- rbind(cellStates, data.frame(condition = rep("Normal", ncol(normFeatureCounts))))
for (cellType in cellTypes){
tumorIDs <- scan(paste("../../cancerproject/proj_090817/tumor_IDs/tumor", cellType, ".txt", sep = ''), character(), sep = '\t')
tumorFC <- featureCounts[,which(colnames(featureCounts)%in%tumorIDs)]
normalIDs <- scan(paste("../../cancerproject/proj_090817/normal_IDs/norm", cellType, ".txt", sep = ''), character(), sep = '\t')
normalFC <- normFeatureCounts[,which(colnames(normFeatureCounts)%in%normalIDs)]
cellStates <- data.frame(condition = rep("Tumor", ncol(tumorFC)))
cellStates <- rbind(cellStates, data.frame(condition = rep("Normal", ncol(normalFC))))
if (exists(totalFC)){
totalFC <- cbind(totalFC, tumorFC, normalFC)
}else{
totalFC <- cbind(tumorFC, normalFC)
}
}
#! /usr/bin/env Rscript
require(readr)
genes <- c('ACTB', 'B2M', 'GAPDH', 'GUSB', 'HPRT1', 'PGK1', 'PPIA', 'RPLP0', 'TBP', 'TFRC')
cellTypes <- c("BRCA", "COAD", "LUAD", "LUSC", "PRAD")
featureCounts <- as.data.frame(read_tsv("../../cancerproject/proj_090817/data/GSM1536837_06_01_15_TCGA_24.tumor_Rsubread_FeatureCounts.txt.gz"))
#column_to_rownames(featureCounts, var = "X1")
rownames(featureCounts) <- featureCounts$X1
featureCounts$X1 <- NULL
#featureCounts$condition <- 'Tumor'
#featureCounts <- t(featureCounts)
cellStates <- data.frame(condition = rep("Tumor", ncol(featureCounts)))
normFeatureCounts <- as.data.frame(read_tsv("../../cancerproject/proj_090817/data/GSM1697009_06_01_15_TCGA_24.normal_Rsubread_FeatureCounts.txt.gz"))
rownames(normFeatureCounts) <- normFeatureCounts$X1
normFeatureCounts$X1 <- NULL
#normFeatureCounts$condition <- 'Normal'
cellStates <- rbind(cellStates, data.frame(condition = rep("Normal", ncol(normFeatureCounts))))
for (cellType in cellTypes){
tumorIDs <- scan(paste("../../cancerproject/proj_090817/tumor_IDs/tumor", cellType, ".txt", sep = ''), character(), sep = '\t')
tumorFC <- featureCounts[,which(colnames(featureCounts)%in%tumorIDs)]
normalIDs <- scan(paste("../../cancerproject/proj_090817/normal_IDs/norm", cellType, ".txt", sep = ''), character(), sep = '\t')
normalFC <- normFeatureCounts[,which(colnames(normFeatureCounts)%in%normalIDs)]
cellStates <- data.frame(condition = rep("Tumor", ncol(tumorFC)))
cellStates <- rbind(cellStates, data.frame(condition = rep("Normal", ncol(normalFC))))
if (exists(totalFC)){
totalFC <- cbind(totalFC, tumorFC, normalFC)
}else{
totalFC <- cbind(tumorFC, normalFC)
}
}
#! /usr/bin/env Rscript
require(readr)
genes <- c('ACTB', 'B2M', 'GAPDH', 'GUSB', 'HPRT1', 'PGK1', 'PPIA', 'RPLP0', 'TBP', 'TFRC')
cellTypes <- c("BRCA", "COAD", "LUAD", "LUSC", "PRAD")
featureCounts <- as.data.frame(read_tsv("../../cancerproject/proj_090817/data/GSM1536837_06_01_15_TCGA_24.tumor_Rsubread_FeatureCounts.txt.gz"))
#column_to_rownames(featureCounts, var = "X1")
rownames(featureCounts) <- featureCounts$X1
featureCounts$X1 <- NULL
#featureCounts$condition <- 'Tumor'
#featureCounts <- t(featureCounts)
cellStates <- data.frame(condition = rep("Tumor", ncol(featureCounts)))
normFeatureCounts <- as.data.frame(read_tsv("../../cancerproject/proj_090817/data/GSM1697009_06_01_15_TCGA_24.normal_Rsubread_FeatureCounts.txt.gz"))
rownames(normFeatureCounts) <- normFeatureCounts$X1
normFeatureCounts$X1 <- NULL
#normFeatureCounts$condition <- 'Normal'
cellStates <- rbind(cellStates, data.frame(condition = rep("Normal", ncol(normFeatureCounts))))
for (cellType in cellTypes){
tumorIDs <- scan(paste("../../cancerproject/proj_090817/tumor_IDs/tumor", cellType, ".txt", sep = ''), character(), sep = '\t')
tumorFC <- featureCounts[,which(colnames(featureCounts)%in%tumorIDs)]
normalIDs <- scan(paste("../../cancerproject/proj_090817/normal_IDs/norm", cellType, ".txt", sep = ''), character(), sep = '\t')
normalFC <- normFeatureCounts[,which(colnames(normFeatureCounts)%in%normalIDs)]
cellStates <- data.frame(condition = rep("Tumor", ncol(tumorFC)))
cellStates <- rbind(cellStates, data.frame(condition = rep("Normal", ncol(normalFC))))
if (exists("totalFC")){
totalFC <- cbind(totalFC, tumorFC, normalFC)
}else{
totalFC <- cbind(tumorFC, normalFC)
}
}
totalFC
summary(totalFC)
str(totalFC)
totalFC[1,]
totalFC[,1]
tumorFC
cellStates
tumorFC <- t(tumorFC)
tumorFC
#! /usr/bin/env Rscript
require(readr)
genes <- c('ACTB', 'B2M', 'GAPDH', 'GUSB', 'HPRT1', 'PGK1', 'PPIA', 'RPLP0', 'TBP', 'TFRC')
cellTypes <- c("BRCA", "COAD", "LUAD", "LUSC", "PRAD")
featureCounts <- as.data.frame(read_tsv("../../cancerproject/proj_090817/data/GSM1536837_06_01_15_TCGA_24.tumor_Rsubread_FeatureCounts.txt.gz"))
#column_to_rownames(featureCounts, var = "X1")
rownames(featureCounts) <- featureCounts$X1
featureCounts$X1 <- NULL
#featureCounts$condition <- 'Tumor'
#featureCounts <- t(featureCounts)
cellStates <- data.frame(condition = rep("Tumor", ncol(featureCounts)))
normFeatureCounts <- as.data.frame(read_tsv("../../cancerproject/proj_090817/data/GSM1697009_06_01_15_TCGA_24.normal_Rsubread_FeatureCounts.txt.gz"))
rownames(normFeatureCounts) <- normFeatureCounts$X1
normFeatureCounts$X1 <- NULL
#normFeatureCounts$condition <- 'Normal'
cellStates <- rbind(cellStates, data.frame(condition = rep("Normal", ncol(normFeatureCounts))))
for (cellType in cellTypes){
tumorIDs <- scan(paste("../../cancerproject/proj_090817/tumor_IDs/tumor", cellType, ".txt", sep = ''), character(), sep = '\t')
tumorFC <- featureCounts[,which(colnames(featureCounts)%in%tumorIDs)]
normalIDs <- scan(paste("../../cancerproject/proj_090817/normal_IDs/norm", cellType, ".txt", sep = ''), character(), sep = '\t')
normalFC <- normFeatureCounts[,which(colnames(normFeatureCounts)%in%normalIDs)]
cellStates <- data.frame(condition = rep("Tumor", ncol(tumorFC)))
cellStates <- rbind(cellStates, data.frame(condition = rep("Normal", ncol(normalFC))))
tumorFC <- t(tumorFC)
tumorFC$cell_state <- "Tumor"
normalFC <- t(normalFC)
normalFC$cell_state <- "Normal"
if (exists("totalFC")){
totalFC <- rbind(totalFC, tumorFC, normalFC)
}else{
totalFC <- rbind(tumorFC, normalFC)
}
}
tumorFC
tumorIDs <- scan(paste("../../cancerproject/proj_090817/tumor_IDs/tumor", cellType, ".txt", sep = ''), character(), sep = '\t')
tumorFC <- featureCounts[,which(colnames(featureCounts)%in%tumorIDs)]
normalIDs <- scan(paste("../../cancerproject/proj_090817/normal_IDs/norm", cellType, ".txt", sep = ''), character(), sep = '\t')
normalFC <- normFeatureCounts[,which(colnames(normFeatureCounts)%in%normalIDs)]
cellStates <- data.frame(condition = rep("Tumor", ncol(tumorFC)))
cellStates <- rbind(cellStates, data.frame(condition = rep("Normal", ncol(normalFC))))
tumorFC <- t(tumorFC)
tumorFC
tumorFC[1:20,]
tumorFC[,1:20]
#! /usr/bin/env Rscript
require(readr)
genes <- c('ACTB', 'B2M', 'GAPDH', 'GUSB', 'HPRT1', 'PGK1', 'PPIA', 'RPLP0', 'TBP', 'TFRC')
cellTypes <- c("BRCA", "COAD", "LUAD", "LUSC", "PRAD")
featureCounts <- as.data.frame(read_tsv("../../cancerproject/proj_090817/data/GSM1536837_06_01_15_TCGA_24.tumor_Rsubread_FeatureCounts.txt.gz"))
#column_to_rownames(featureCounts, var = "X1")
rownames(featureCounts) <- featureCounts$X1
featureCounts$X1 <- NULL
#featureCounts$condition <- 'Tumor'
#featureCounts <- t(featureCounts)
cellStates <- data.frame(condition = rep("Tumor", ncol(featureCounts)))
normFeatureCounts <- as.data.frame(read_tsv("../../cancerproject/proj_090817/data/GSM1697009_06_01_15_TCGA_24.normal_Rsubread_FeatureCounts.txt.gz"))
rownames(normFeatureCounts) <- normFeatureCounts$X1
normFeatureCounts$X1 <- NULL
#normFeatureCounts$condition <- 'Normal'
cellStates <- rbind(cellStates, data.frame(condition = rep("Normal", ncol(normFeatureCounts))))
for (cellType in cellTypes){
tumorIDs <- scan(paste("../../cancerproject/proj_090817/tumor_IDs/tumor", cellType, ".txt", sep = ''), character(), sep = '\t')
tumorFC <- featureCounts[,which(colnames(featureCounts)%in%tumorIDs)]
normalIDs <- scan(paste("../../cancerproject/proj_090817/normal_IDs/norm", cellType, ".txt", sep = ''), character(), sep = '\t')
normalFC <- normFeatureCounts[,which(colnames(normFeatureCounts)%in%normalIDs)]
cellStates <- data.frame(condition = rep("Tumor", ncol(tumorFC)))
cellStates <- rbind(cellStates, data.frame(condition = rep("Normal", ncol(normalFC))))
tumorFC <- t(tumorFC)[,1:20]
tumorFC$cell_state <- "Tumor"
normalFC <- t(normalFC)[,1:20]
normalFC$cell_state <- "Normal"
if (exists("totalFC")){
totalFC <- rbind(totalFC, tumorFC, normalFC)
}else{
totalFC <- rbind(tumorFC, normalFC)
}
}
tumorFC
tumorIDs <- scan(paste("../../cancerproject/proj_090817/tumor_IDs/tumor", cellType, ".txt", sep = ''), character(), sep = '\t')
tumorFC <- featureCounts[,which(colnames(featureCounts)%in%tumorIDs)]
normalIDs <- scan(paste("../../cancerproject/proj_090817/normal_IDs/norm", cellType, ".txt", sep = ''), character(), sep = '\t')
normalFC <- normFeatureCounts[,which(colnames(normFeatureCounts)%in%normalIDs)]
cellStates <- data.frame(condition = rep("Tumor", ncol(tumorFC)))
cellStates <- rbind(cellStates, data.frame(condition = rep("Normal", ncol(normalFC))))
tumorFC <- t(tumorFC)[,1:20]
tumorFC
tumorFC$cell_state <- "Tumor"
#! /usr/bin/env Rscript
require(readr)
genes <- c('ACTB', 'B2M', 'GAPDH', 'GUSB', 'HPRT1', 'PGK1', 'PPIA', 'RPLP0', 'TBP', 'TFRC')
cellTypes <- c("BRCA", "COAD", "LUAD", "LUSC", "PRAD")
featureCounts <- as.data.frame(read_tsv("../../cancerproject/proj_090817/data/GSM1536837_06_01_15_TCGA_24.tumor_Rsubread_FeatureCounts.txt.gz"))
#column_to_rownames(featureCounts, var = "X1")
rownames(featureCounts) <- featureCounts$X1
featureCounts$X1 <- NULL
#featureCounts$condition <- 'Tumor'
#featureCounts <- t(featureCounts)
cellStates <- data.frame(condition = rep("Tumor", ncol(featureCounts)))
normFeatureCounts <- as.data.frame(read_tsv("../../cancerproject/proj_090817/data/GSM1697009_06_01_15_TCGA_24.normal_Rsubread_FeatureCounts.txt.gz"))
rownames(normFeatureCounts) <- normFeatureCounts$X1
normFeatureCounts$X1 <- NULL
#normFeatureCounts$condition <- 'Normal'
cellStates <- rbind(cellStates, data.frame(condition = rep("Normal", ncol(normFeatureCounts))))
for (cellType in cellTypes){
tumorIDs <- scan(paste("../../cancerproject/proj_090817/tumor_IDs/tumor", cellType, ".txt", sep = ''), character(), sep = '\t')
tumorFC <- featureCounts[,which(colnames(featureCounts)%in%tumorIDs)]
normalIDs <- scan(paste("../../cancerproject/proj_090817/normal_IDs/norm", cellType, ".txt", sep = ''), character(), sep = '\t')
normalFC <- normFeatureCounts[,which(colnames(normFeatureCounts)%in%normalIDs)]
cellStates <- data.frame(condition = rep("Tumor", ncol(tumorFC)))
cellStates <- rbind(cellStates, data.frame(condition = rep("Normal", ncol(normalFC))))
tumorFC <- as.data.frame(t(tumorFC)[,1:20])
tumorFC$cell_state <- "Tumor"
normalFC <- as.data.frame(t(normalFC)[,1:20])
normalFC$cell_state <- "Normal"
if (exists("totalFC")){
totalFC <- rbind(totalFC, tumorFC, normalFC)
}else{
totalFC <- rbind(tumorFC, normalFC)
}
}
tumorFC
normalFC
totalFC <- rbind(tumorFC, normalFC)
totalFC
totalFC <- rbind(totalFC, tumorFC, normalFC)
totalFC
for (cellType in cellTypes){
tumorIDs <- scan(paste("../../cancerproject/proj_090817/tumor_IDs/tumor", cellType, ".txt", sep = ''), character(), sep = '\t')
tumorFC <- featureCounts[,which(colnames(featureCounts)%in%tumorIDs)]
normalIDs <- scan(paste("../../cancerproject/proj_090817/normal_IDs/norm", cellType, ".txt", sep = ''), character(), sep = '\t')
normalFC <- normFeatureCounts[,which(colnames(normFeatureCounts)%in%normalIDs)]
cellStates <- data.frame(condition = rep("Tumor", ncol(tumorFC)))
cellStates <- rbind(cellStates, data.frame(condition = rep("Normal", ncol(normalFC))))
tumorFC <- as.data.frame(t(tumorFC)[,1:20])
tumorFC$cell_state <- "Tumor"
normalFC <- as.data.frame(t(normalFC)[,1:20])
normalFC$cell_state <- "Normal"
if (exists("totalFC")){
totalFC <- rbind(totalFC, tumorFC, normalFC)
}else{
totalFC <- rbind(tumorFC, normalFC)
}
}
totalFC
rm(totalFC)
for (cellType in cellTypes){
tumorIDs <- scan(paste("../../cancerproject/proj_090817/tumor_IDs/tumor", cellType, ".txt", sep = ''), character(), sep = '\t')
tumorFC <- featureCounts[,which(colnames(featureCounts)%in%tumorIDs)]
normalIDs <- scan(paste("../../cancerproject/proj_090817/normal_IDs/norm", cellType, ".txt", sep = ''), character(), sep = '\t')
normalFC <- normFeatureCounts[,which(colnames(normFeatureCounts)%in%normalIDs)]
cellStates <- data.frame(condition = rep("Tumor", ncol(tumorFC)))
cellStates <- rbind(cellStates, data.frame(condition = rep("Normal", ncol(normalFC))))
tumorFC <- as.data.frame(t(tumorFC)[,1:20])
tumorFC$cell_state <- "Tumor"
normalFC <- as.data.frame(t(normalFC)[,1:20])
normalFC$cell_state <- "Normal"
if (exists("totalFC")){
totalFC <- rbind(totalFC, tumorFC, normalFC)
}else{
totalFC <- rbind(tumorFC, normalFC)
}
}
totalFC
fit <- rpart(cell_state ~., method = "class", data = totalFC)
printcp(fit)
plotcp(fit)
summary(fit)
pfit <- ?prune
?prune
pfit <- prune(fit, cp = fit$cptable[which.min(fit$cptable[,"xerror"]), "CP"])
plot(pfit, uniform=T, main="Pruned Classification Tree for FeatureCount")
text(pfit, use.n = T, all = T, cex = .8)
install.packages("randomForest")
library(randomForest)
fit <- randomForest(cell_state ~ ., data = totalFC)
fit <- randomForest(cell_state ~ 1/2-SBSRNA4, data = totalFC)
fit <- randomForest(cell_state ~ ., data = totalFC)
totalFC
fit <- randomForest(cell_state ~ 1/2-SBSRNA4, data = totalFC)
fit <- randomForest(cell_state ~ ., method = "class", data = totalFC)
names(totalFC) <- make.names(names(totalFC))
fit <- randomForest(cell_state ~ ., data = totalFC)
totalFC
fit <- randomForest(cell_state ~ ., data = totalFC)
sapply(totalFC, class)
1:10
names(totalFC)[1:10]
names(totalFC)[1:20]
totalFC[names(totalFC)[1:20]] <- lapply(totalFC[names(totalFC)[1:20]], factor)
sapply(totalFC, class)
fit <- randomForest(cell_state ~ ., data = totalFC)
install.packages("kmeans")
install.packages("k means")
?kmeans
kmeans(totalFC, 2)
set.seed(20)
kmeans(totalFC, 2)
library(VIM)
install.packages("VIM")
library(VIM)
aggr(totalFC)
install.packages("robustbase")
library(VIM)
install.packages("VIM")
library(VIM)
install.packages("VIM")
library(VIM)
aggr(totalFC)
kmeans(totalFC[1:20], 2)
clusters <- kmeans(totalFC[1:20], 2)
str(clusters)
ggplot(clusters)
require(ggplot)
require(ggplot2)
ggplot(clusters)
str(totalFC)
clusters$cell_state <- as.factor(clusters$cluster)
clusters <- kmeans(totalFC[1:2], 2)
clusters
str(clusters)
clusters$cell_state <- clusters$cluster
ggplot(clusters, aes(x = X1.2.SBSRNA4, y = A1BG, colour = as.factor(cell_state))) + geom_point()
ggplot()
ggplot() + geom_point(aes(x = X1.2.SBSRNA4, y = A1BG, colour = as.factor(cell_state)), data = clusters)
totalFC$cluster <- as.factor(clusters$cluster)
ggplot() + geom_point(aes(x = X1.2.SBSRNA4, y = A1BG, colour = as.factor(cluster)), data = totalFC)
ggplot(aes(x = X1.2.SBSRNA4, y = A1BG, colour = as.factor(cluster)), data = totalFC) + geom_point()
ggplot(aes(x = X1.2.SBSRNA4, y = A1BG, colour = as.factor(cluster)), data = totalFC) + geom_point()
ggsave("../graphs/exampleKmeans.pdf", "pdf")
ggsave("../graphs/exampleKmeans.pdf", method = "pdf")
?ggsave
ggsave("../graphs/exampleKmeans.pdf", device = "pdf")
ggplot(aes(x = X1.2.SBSRNA4, y = A1BG, colour = as.factor(cluster)), data = totalFC) + geom_point() + scale_x_continuous(breaks = seq(min(X1.2.SBSRNA4), max(X1.2.SBSRNA4)))
ggplot(aes(x = X1.2.SBSRNA4, y = A1BG, colour = as.factor(cluster)), data = totalFC) + geom_point() + scale_x_continuous(breaks = seq(min(totalFC$X1.2.SBSRNA4), max(totalFC$X1.2.SBSRNA4)))
sapply(totalFC[1:20], integer)
sapply(totalFC[names(totalFC)[1:20]], integer)
lapply(totalFC[1:20], integer)
lapply(totalFC[names(totalFC)[1:20]], integer)
totalFC[names(totalFC)[1:20]]
totalFC[names(totalFC)[1:20]] <- lapply(totalFC[names(totalFC)[1:20]], integer)
totalFC[names(totalFC)[1:20]] <- lapply(totalFC[names(totalFC)[1:20]], factor)
totalFC[names(totalFC)[1:20]] <- lapply(totalFC[names(totalFC)[1:20]], int)
totalFC[names(totalFC)[1:20]] <- lapply(totalFC[names(totalFC)[1:20]], double)
ggplot(aes(x = X1.2.SBSRNA4, y = A1BG, colour = as.factor(cluster)), data = totalFC) + geom_point() + scale_x_continuous(breaks = seq(min(as.numeric(totalFC$X1.2.SBSRNA4)), max(as.numeric(totalFC$X1.2.SBSRNA4))))
ggplot(aes(x = X1.2.SBSRNA4, y = A1BG, colour = as.factor(cluster)), data = totalFC) + geom_point() + scale_x_continuous(breaks = c(100, 200))
sum(totalFC$cell_state == "Tumor")
sum(totalFC$cell_state == "Normal")
library(cluster)
clusplot(totalFC[,c(-21, -22)], totalFC$cluster, color=T, shade=T)
knitr::opts_chunk$set(echo = TRUE)
clinical_data <- as.data.frame(read_tsv("../data/her2_Clinical_Data.tsv"))
require(readr)
clinical_data <- as.data.frame(read_tsv("../data/her2_Clinical_Data.tsv"))
clinical_data
clinical_data[,1:3]
aggr(clinical_data)
aggr(clinical_data[,-c(1:3)])
aggr(clinical_data[,c(4:20)])
clinical_data[,7]
clinical_data <- as.data.frame(read_tsv("../data/her2_Clinical_Data.tsv"))
for (column in colnames(clinical_data)){
clinical_data[column][which(clinical_data[column] %in% c("[Not Evaluated]", "[Not Available]"))] <- NA
}
aggr(clinical_data[4:20])
aggr(clinical_data[4:20])
clinical_data
clinical_data[,4:20]
column
clinical_data[column]
for (column in colnames(clinical_data)){
clinical_data[column][which(clinical_data[column] %in% c("[Not Evaluated]", "[Not Available]", "<NA>"))] <- NA
}
clinical_data[column]
clinical_data[,4:20]
str(clinical_data)
make.true.NA <- function(x) if(is.character(x)||is.factor(x)){
is.na(x) <- x%in%c("[Not Available]","[Not Evaluated]"); x} else {
x}
clinical_data <- lapply(clinical_data, make.true.NA)
clinical_data
clinical_data <- as.data.frame(read_tsv("../data/her2_Clinical_Data.tsv"))
summary(clinical_data)
clinical_data <- as.data.frame(read_tsv("../data/her2_Clinical_Data.tsv"))
make.true.NA <- function(x) if(is.character(x)||is.factor(x)){
is.na(x) <- x%in%c("[Not Available]","[Not Evaluated]"); x} else {
x}
clinical_data <- lapply(clinical_data, make.true.NA)
aggr(clinical_data[, 4:20])
clinical_data
clinical_data <- as.data.frame(read_tsv("../data/her2_Clinical_Data.tsv"))
make.true.NA <- function(x) if(is.character(x)||is.factor(x)){
is.na(x) <- x%in%c("[Not Available]","[Not Evaluated]"); x} else {
x}
clinical_data <- as.data.frame(lapply(clinical_data, make.true.NA))
aggr(clinical_data[, 4:20])
print(clinical_data, col.names = F)
aggr(clinical_data[, 4:200 ])
row.names(clinical_data) <- clinical_data$X1
clinical_data$X1 <- NA
clinical_data <- as.data.frame(t(clinical_data))
clinical_data
clinical_data <- as.data.frame(read_tsv("../data/her2_Clinical_Data.tsv"))
make.true.NA <- function(x) if(is.character(x)||is.factor(x)){
is.na(x) <- x%in%c("[Not Available]","[Not Evaluated]"); x} else {
x}
clinical_data <- as.data.frame(lapply(clinical_data, make.true.NA))
aggr(clinical_data[, 4:200 ])
row.names(clinical_data) <- clinical_data$X1
clinical_data$X1 <- NULL
clinical_data <- as.data.frame(t(clinical_data))
aggr(clinical_data)
clinical_data[1,]
clinical_data[,1]
colnames(clinical_data)[1]
sum(clinical_data[which(clinical_data$her2_status_by_ihc == "Positive")])
sum(which(clinical_data$her2_status_by_ihc == "Positive"))
sum(which(clinical_data$her2_status_by_ihc == "Negative"))
colnames(clinical_data)
?aggr
nrow(clinical_data)
ncol(clinical_data)
sum(clinical_data$her2_status_by_ihc[which(clinical_data$her2_status_by_ihc == "Positive")])
which(clinical_data$her2_status_by_ihc == "Positive")
sum(clinical_data$her2_status_by_ihc == "Positive")
clinical_data$her2_status_by_ihc == "Positive"
sum(clinical_data$her2_status_by_ihc == "Positive" && !is.na(clinical_data$her2_status_by_ihc))
sum(is.na(clinical_data$her2_status_by_ihc))
sum(!is.na(clinical_data$her2_status_by_ihc))
sum(!is.na(clinical_data$her2_status_by_ihc) & clinical_data$her2_status_by_ihc == "Positivity")
sum(!is.na(clinical_data$her2_status_by_ihc) & clinical_data$her2_status_by_ihc == "Positivite")
sum(!is.na(clinical_data$her2_status_by_ihc) & clinical_data$her2_status_by_ihc == "Positive")
sum(clinical_data$her2_status_by_ihc == "Positive" & !is.na(clinical_data$her2_status_by_ihc))
sum(clinical_data$her2_status_by_ihc == "Negative" & !is.na(clinical_data$her2_status_by_ihc))
pos_her2 <- clinical_data[which(clinical_data$her2_status_by_ihc == "Positive"),]
pos_her2
getwd()
gene_expr_data <- as.data.frame(read_tsv("../../cancerproject/proj_090817/data/GSM1536837_06_01_15_TCGA_24.tumor_Rsubread_FeatureCounts.txt.gz"))
rownames(gene_expr_data)
colnames(gene_expr_data)
gene_expr_data[1,]
gene_expr_data[1,1]
gene_expr_data$X1
pos_her2 <- rownames(clinical_data[which(clinical_data$her2_status_by_ihc == "Positive"),])
neg_her2 <- rownames(clinical_data[which(clinical_data$her2_status_by_ihc == "Negative"),])
rownames(gene_expr_data) <- gene_expr_data$X1
gene_expr_data$X1 <- NULL
gene_expr_data <- as.data.frame(t(gene_expr_data))
gene_expr_data <- as.data.frame(t(gene_expr_data))
pos_her2_expr <- gene_expr_data[which(rownames(gene_expr_data) %in% pos_her2),]
neg_her2_expr <- gene_expr_data[which(rownames(gene_expr_data) %in% neg_her2),]
pos_her2_expr
nrow(pos_her2_expr)
pos_her2
rownames(gene_expr_data)
colnames(gene_expr_data)
gene_expr_data <- as.data.frame(t(gene_expr_data))
gene_expr_data
rownames(gene_expr_data)
pos_her2_expr <- gene_expr_data[which(rownames(gene_expr_data) %in% pos_her2),]
pos_her2_expr <- gene_expr_data[which(rownames(gene_expr_data) %in% pos_her2),]
neg_her2_expr <- gene_expr_data[which(rownames(gene_expr_data) %in% neg_her2),]
rownames(pos_her2_expr)
gsub("\.", "-", pos_her2)
gsub(".", "-", pos_her2)
gsub("\.", "-", pos_her2)
gsub("\\.", "-", pos_her2)
pos_her2 <- gsub("\\.","-", rownames(clinical_data[which(clinical_data$her2_status_by_ihc == "Positive"),])
neg_her2 <- rownames(clinical_data[which(clinical_data$her2_status_by_ihc == "Negative"),])
pos_her2 <- gsub("\\.","-", rownames(clinical_data[which(clinical_data$her2_status_by_ihc == "Positive"),]))
neg_her2 <- gsub("\\.","-", rownames(clinical_data[which(clinical_data$her2_status_by_ihc == "Negative"),]))
pos_her2_expr <- gene_expr_data[which(rownames(gene_expr_data) %in% pos_her2),]
pos_her2_expr <- gene_expr_data[which(rownames(gene_expr_data) %in% pos_her2),]
neg_her2_expr <- gene_expr_data[which(rownames(gene_expr_data) %in% neg_her2),]
pos_her2_expr
nrow(pos_her2_expr)
nrow(neg_her2_expr)
length(pos_her2)
install.packages("mlr")
classif.svm <- makeLearner("classif.svm", predict.type = "twoclass")
require(mlr)
classif.svm <- makeLearner("classif.svm", predict.type = "twoclass")
classif.svm <- makeLearner("classif.svm", predict.type = "prob")
classif.svm
pos_her2_expr$her2_status_by_ihc <- "Positive"
neg_her2_expr$her2_status_by_ihc <- "Negative"
total_her2_expr <- rbind(pos_her2_expr, neg_her2_expr)
total_her2_expr
total_her2_expr$her2_status_by_ihc
task_her2 <- makeClassifTask(total_her2_expr, target = "her2_status_by_ihc")
task_her2 <- makeClassifTask(data = total_her2_expr, target = "her2_status_by_ihc")
colnames(total_her2_expr) <- make.names(colnames(total_her2_expr))
task_her2 <- makeClassifTask(data = total_her2_expr, target = "her2_status_by_ihc")
training.pos_her2_expr <- pos_her2_expr[1:50,]
training.neg_her2_expr <- neg_her2_expr[1:50,]
total_her2_expr <- rbind(pos_her2_expr[-c(1:50),], neg_her2_expr[-c(1:50),])
nrow(pos_her2_expr[-c(1:50),])
nrow(training.pos_her2_expr)
nrow(pos_her2_expr)
training.her2_expression <- rbind(training.pos_her2_expr, training.neg_her2_expr)
colnames(total_her2_expr) <- make.names(colnames(total_her2_expr))
?sample
?seq_len
training.her2_expression <- sample(seq_len(nrow(total_her2_expr)), nrow(total_her2_expr) / 2)
training.her2_expression
training.her2_expression <- sample(seq_len(nrow(total_her2_expr)), nrow(total_her2_expr) / 4)
model_her2 <- train(classif.svm, task_her2, subset = training.her2_expression)
training.her2_expression
training.her2_expression <- sample(seq_len(nrow(total_her2_expr)), nrow(total_her2_expr) / 2)
model_her2 <- train(classif.svm, task_her2, subset = training.her2_expression)
options(expressions = 5e5)
training.her2_expression <- sample(seq_len(nrow(total_her2_expr)), nrow(total_her2_expr) / 4)
model_her2 <- train(classif.svm, task_her2, subset = training.her2_expression)
help(memory)
?Memory
r
R
