}
mean.Drugs$Irinotecan
mean.low.Drugs <- data.frame(as.data.frame(t(colMeans(effic.Drugs[which(effic.Drugs$HPRT1 == "Low"), -c(1, 2)]))), HPRT1 = "Low")
mean.high.Drugs <- data.frame(as.data.frame(t(colMeans(effic.Drugs[which(effic.Drugs$HPRT1 == "High"), -c(1, 2)]))), HPRT1 = "High")
for (drug in allDrugs){
gbar <- ggplot(effic.Drugs, aes(x = cellID, y = effic.Drugs[[drug]], fill = HPRT1))
ggbar <- gbar + geom_bar(stat = "identity") + theme_bw() +
theme(axis.text.x = element_text(angle = 90, hjust = 1), title = element_text(face = "bold"),
axis.title.x = element_text(face = "bold"), axis.title.y = element_text(face = "bold")) +
labs(title = "IC50 (uM)", x = "Cell Line", y = drug, color = "Mean") +
geom_hline(data = mean.Drugs, aes(yintercept = mean.Drugs[[drug]], color = mean.Drugs$HPRT1))
print(ggbar)
}
mean.low.Drugs <- data.frame(as.data.frame(t(colMeans(effic.Drugs[which(effic.Drugs$HPRT1 == "Low"), -c(1, 2)]))), HPRT1 = "Low")
mean.high.Drugs <- data.frame(as.data.frame(t(colMeans(effic.Drugs[which(effic.Drugs$HPRT1 == "High"), -c(1, 2)]))), HPRT1 = "High")
for (drug in allDrugs){
gbar <- ggplot(effic.Drugs, aes(x = cellID, y = effic.Drugs[[drug]], fill = HPRT1))
ggbar <- gbar + geom_bar(stat = "identity") + theme_bw() +
theme(axis.text.x = element_text(angle = 90, hjust = 1), title = element_text(face = "bold", hjust = 0.5),
axis.title.x = element_text(face = "bold"), axis.title.y = element_text(face = "bold")) +
labs(title = "IC50 (uM)", x = "Cell Line", y = drug, color = "Mean") +
geom_hline(data = mean.Drugs, aes(yintercept = mean.Drugs[[drug]], color = mean.Drugs$HPRT1))
print(ggbar)
}
mean.low.Drugs <- data.frame(as.data.frame(t(colMeans(effic.Drugs[which(effic.Drugs$HPRT1 == "Low"), -c(1, 2)]))), HPRT1 = "Low")
mean.high.Drugs <- data.frame(as.data.frame(t(colMeans(effic.Drugs[which(effic.Drugs$HPRT1 == "High"), -c(1, 2)]))), HPRT1 = "High")
mean.Drugs <- rbind(mean.low.Drugs, mean.high.Drugs)
names(mean.Drugs)[names(mean.Drugs) == "X17.AAG"] <- "17-AAG"
names(mean.Drugs) <- sub("\\.", "-", names(mean.Drugs))
for (drug in allDrugs){
gbar <- ggplot(effic.Drugs, aes(x = cellID, y = effic.Drugs[[drug]], fill = HPRT1))
ggbar <- gbar + geom_bar(stat = "identity") + theme_bw() +
theme(axis.text.x = element_text(angle = 90, hjust = 1), title = element_text(face = "bold", hjust = 0.5),
axis.title.x = element_text(face = "bold"), axis.title.y = element_text(face = "bold")) +
labs(title = "IC50 (uM)", x = "Cell Line", y = drug, color = "Mean") +
geom_hline(data = mean.Drugs, aes(yintercept = mean.Drugs[[drug]], color = mean.Drugs$HPRT1))
print(ggbar)
}
gbar <- ggplot(effic.Drugs, aes(x = cellID, y = effic.Drugs[[drug]], fill = HPRT1))
ggbar <- gbar + geom_bar(stat = "identity") + theme_bw() +
theme(axis.text.x = element_text(angle = 90, hjust = 1), title = element_text(face = "bold", hjust = 0),
axis.title.x = element_text(face = "bold"), axis.title.y = element_text(face = "bold")) +
labs(title = "IC50 (uM)", x = "Cell Line", y = drug, color = "Mean") +
geom_hline(data = mean.Drugs, aes(yintercept = mean.Drugs[[drug]], color = mean.Drugs$HPRT1))
print(ggbar)
gbar <- ggplot(effic.Drugs, aes(x = cellID, y = effic.Drugs[[drug]], fill = HPRT1))
ggbar <- gbar + geom_bar(stat = "identity") + theme_bw() +
theme(axis.text.x = element_text(angle = 90, hjust = 1), title = element_text(face = "bold", hjust = 1),
axis.title.x = element_text(face = "bold"), axis.title.y = element_text(face = "bold")) +
labs(title = "IC50 (uM)", x = "Cell Line", y = drug, color = "Mean") +
geom_hline(data = mean.Drugs, aes(yintercept = mean.Drugs[[drug]], color = mean.Drugs$HPRT1))
print(ggbar)
gbar <- ggplot(effic.Drugs, aes(x = cellID, y = effic.Drugs[[drug]], fill = HPRT1))
ggbar <- gbar + geom_bar(stat = "identity") + theme_bw() +
theme(axis.text.x = element_text(angle = 90, hjust = 1), title = element_text(face = "bold"),
plot.title = element_text(face = "bold", hjust = 0.5)) +
labs(title = "IC50 (uM)", x = "Cell Line", y = drug, color = "Mean") +
geom_hline(data = mean.Drugs, aes(yintercept = mean.Drugs[[drug]], color = mean.Drugs$HPRT1))
print(ggbar)
mean.low.Drugs <- data.frame(as.data.frame(t(colMeans(effic.Drugs[which(effic.Drugs$HPRT1 == "Low"), -c(1, 2)]))), HPRT1 = "Low")
mean.high.Drugs <- data.frame(as.data.frame(t(colMeans(effic.Drugs[which(effic.Drugs$HPRT1 == "High"), -c(1, 2)]))), HPRT1 = "High")
mean.Drugs <- rbind(mean.low.Drugs, mean.high.Drugs)
names(mean.Drugs)[names(mean.Drugs) == "X17.AAG"] <- "17-AAG"
names(mean.Drugs) <- sub("\\.", "-", names(mean.Drugs))
for (drug in allDrugs){
gbar <- ggplot(effic.Drugs, aes(x = cellID, y = effic.Drugs[[drug]], fill = HPRT1))
ggbar <- gbar + geom_bar(stat = "identity") + theme_bw() +
theme(axis.text.x = element_text(angle = 90, hjust = 1), title = element_text(face = "bold"),
plot.title = element_text(face = "bold", hjust = 0.5)) +
labs(title = "IC50 (uM)", x = "Cell Line", y = drug, color = "Mean") +
geom_hline(data = mean.Drugs, aes(yintercept = mean.Drugs[[drug]], color = mean.Drugs$HPRT1))
print(ggbar)
}
?ggsave
drugData
foo = F
foo = F
if (foo == T){
print("yay")
}
else if (foo == F){
foo = F
if (foo == T){
print("yay")
}else if (foo == F){
print("noo")
}
gbar <- ggplot(effic.Drugs, aes(x = cellID, y = effic.Drugs[[drug]], fill = HPRT1))
ggsave(paste("../drug_graphs/", drug, "_basic.pdf"), device = "pdf")
gbar <- ggplot(effic.Drugs, aes(x = cellID, y = effic.Drugs[[drug]], fill = HPRT1))
ggbar <- gbar + geom_bar(stat = "identity") + theme_bw() +
theme(axis.text.x = element_text(angle = 90, hjust = 1), title = element_text(face = "bold"),
plot.title = element_text(face = "bold", hjust = 0.5)) +
labs(title = "IC50 (uM)", x = "Cell Line", y = drug, color = "Mean") +
geom_hline(data = mean.Drugs, aes(yintercept = mean.Drugs[[drug]], color = mean.Drugs$HPRT1))
gbar <- ggplot(effic.Drugs, aes(x = cellID, y = effic.Drugs[[drug]], fill = HPRT1))
ggbar <- gbar + geom_bar(stat = "identity") + theme_bw() +
theme(axis.text.x = element_text(angle = 90, hjust = 1), title = element_text(face = "bold"),
plot.title = element_text(face = "bold", hjust = 0.5)) +
labs(title = "IC50 (uM)", x = "Cell Line", y = drug, color = "Mean") +
geom_hline(data = mean.Drugs, aes(yintercept = mean.Drugs[[drug]], color = mean.Drugs$HPRT1))
print(ggbar)
ggsave(paste("../drug_graphs/", drug, "_basic.pdf"), plot = ggbar, device = "pdf")
mean.low.Drugs <- data.frame(as.data.frame(t(colMeans(effic.Drugs[which(effic.Drugs$HPRT1 == "Low"), -c(1, 2)]))), HPRT1 = "Low")
mean.high.Drugs <- data.frame(as.data.frame(t(colMeans(effic.Drugs[which(effic.Drugs$HPRT1 == "High"), -c(1, 2)]))), HPRT1 = "High")
mean.Drugs <- rbind(mean.low.Drugs, mean.high.Drugs)
names(mean.Drugs)[names(mean.Drugs) == "X17.AAG"] <- "17-AAG"
names(mean.Drugs) <- sub("\\.", "-", names(mean.Drugs))
for (drug in allDrugs){
gbar <- ggplot(effic.Drugs, aes(x = cellID, y = effic.Drugs[[drug]], fill = HPRT1))
ggbar <- gbar + geom_bar(stat = "identity") + theme_bw() +
theme(axis.text.x = element_text(angle = 90, hjust = 1), title = element_text(face = "bold"),
plot.title = element_text(face = "bold", hjust = 0.5)) +
labs(title = "IC50 (uM)", x = "Cell Line", y = drug, color = "Mean") +
geom_hline(data = mean.Drugs, aes(yintercept = mean.Drugs[[drug]], color = mean.Drugs$HPRT1))
print(ggbar)
ggsave(paste("../drug_graphs/", drug, "_basic.pdf"), plot = ggbar, device = "pdf")
}
diff.effic.Drugs <- data.frame(cellID = effic.Drugs$cellID, HPRT1 = effic.Drugs$HPRT1, as.data.frame(sapply(effic.Drugs[,-c(1,2)], function(x){8 - x})))
mean.low.Drugs <- data.frame(as.data.frame(t(colMeans(diff.effic.Drugs[which(diff.effic.Drugs$HPRT1 == "Low"), -c(1, 2)]))), HPRT1 = "Low")
mean.high.Drugs <- data.frame(as.data.frame(t(colMeans(diff.effic.Drugs[which(diff.effic.Drugs$HPRT1 == "High"), -c(1, 2)]))), HPRT1 = "High")
mean.Drugs <- rbind(mean.low.Drugs, mean.high.Drugs)
names(mean.Drugs)[names(mean.Drugs) == "X17.AAG"] <- "17-AAG"
names(mean.Drugs) <- sub("\\.", "-", names(mean.Drugs))
for (drug in allDrugs){
gbar <- ggplot(effic.Drugs, aes(x = cellID, y = 8 - effic.Drugs[[drug]], fill = HPRT1))
ggbar <- gbar + geom_bar(stat = "identity") + theme_bw() +
theme(axis.text.x = element_text(angle = 90, hjust = 1), title = element_text(face = "bold"),
plot.title = element_text(face = "bold", hjust = 0.5)) +
labs(title = "Maximum value - IC50 (uM)", x = "Cell Line", y = drug, color = "Mean") +
geom_hline(data = mean.Drugs, aes(yintercept = mean.Drugs[[drug]], color = mean.Drugs$HPRT1))
print(ggbar)
ggsave(paste("../drug_graphs/", drug, "_difference.pdf"), plot = ggbar, device = "pdf")
}
inv.effic.Drugs <- data.frame(cellID = effic.Drugs$cellID, HPRT1 = effic.Drugs$HPRT1, as.data.frame(sapply(effic.Drugs[,-c(1,2)], function(x){1 / x})))
mean.low.Drugs <- data.frame(as.data.frame(t(colMeans(inv.effic.Drugs[which(inv.effic.Drugs$HPRT1 == "Low"), -c(1, 2)]))), HPRT1 = "Low")
mean.high.Drugs <- data.frame(as.data.frame(t(colMeans(inv.effic.Drugs[which(inv.effic.Drugs$HPRT1 == "High"), -c(1, 2)]))), HPRT1 = "High")
mean.Drugs <- rbind(mean.low.Drugs, mean.high.Drugs)
names(mean.Drugs)[names(mean.Drugs) == "X17.AAG"] <- "17-AAG"
names(mean.Drugs) <- sub("\\.", "-", names(mean.Drugs))
for (drug in allDrugs){
gbar <- ggplot(effic.Drugs, aes(x = cellID, y = 1 / effic.Drugs[[drug]], fill = HPRT1))
ggbar <- gbar + geom_bar(stat = "identity") + theme_bw() +
theme(axis.text.x = element_text(angle = 90, hjust = 1), title = element_text(face = "bold"),
plot.title = element_text(face = "bold", hjust = 0.5)) +
labs(title = "1 / IC50 (uM)", x = "Cell Line", y = drug, color = "Mean") +
geom_hline(data = mean.Drugs, aes(yintercept = mean.Drugs[[drug]], color = mean.Drugs$HPRT1))
print(ggbar)
ggsave(paste("../drug_graphs/", drug, "_inverse.pdf"), plot = ggbar, device = "pdf")
}
norm.effic.Drugs <- data.frame(cellID = effic.Drugs$cellID, HPRT1 = effic.Drugs$HPRT1, as.data.frame(scale(diff.effic.Drugs[,-c(1,2)])))
mean.low.Drugs <- data.frame(as.data.frame(t(colMeans(norm.effic.Drugs[which(norm.effic.Drugs$HPRT1 == "Low"), -c(1, 2)]))), HPRT1 = "Low")
mean.high.Drugs <- data.frame(as.data.frame(t(colMeans(norm.effic.Drugs[which(norm.effic.Drugs$HPRT1 == "High"), -c(1, 2)]))), HPRT1 = "High")
mean.Drugs <- rbind(mean.low.Drugs, mean.high.Drugs)
names(mean.Drugs)[names(mean.Drugs) == "X17.AAG"] <- "17-AAG"
names(mean.Drugs) <- sub("\\.", "-", names(mean.Drugs))
names(norm.effic.Drugs)[names(norm.effic.Drugs) == "X17.AAG"] <- "17-AAG"
names(norm.effic.Drugs) <- sub("\\.", "-", names(norm.effic.Drugs))
for (drug in allDrugs){
gbar <- ggplot(norm.effic.Drugs, aes(x = cellID, y = norm.effic.Drugs[[drug]], fill = HPRT1))
ggbar <- gbar + geom_bar(stat = "identity") + theme_bw() +
theme(axis.text.x = element_text(angle = 90, hjust = 1), title = element_text(face = "bold"),
plot.title = element_text(face = "bold", hjust = 0.5)) +
labs(title = "Maximum value - IC50 (uM) normalized", x = "Cell Line", y = drug, color = "Mean") +
geom_hline(data = mean.Drugs, aes(yintercept = mean.Drugs[[drug]], color = mean.Drugs$HPRT1))
print(ggbar)
ggsave(paste("../drug_graphs/", drug, "_normalized.pdf"), plot = ggbar, device = "pdf")
}
rm(list = ls())
require(readr)
require(mlr)
require(VIM)
require(e1071)
clinical_data <- as.data.frame(read_tsv("../data/her2_Clinical_Data.tsv"))
make.true.NA <- function(x) if(is.character(x)||is.factor(x)){
is.na(x) <- x%in%c("[Not Available]","[Not Evaluated]"); x} else {
x}
clinical_data <- as.data.frame(lapply(clinical_data, make.true.NA))
# aggr() shows how much is missing, and there is a lot missing
aggr(clinical_data[, 4:200 ])
row.names(clinical_data) <- clinical_data$X1
clinical_data$X1 <- NULL
clinical_data <- as.data.frame(t(clinical_data))
aggr(clinical_data)
pos_her2 <- gsub("\\.","-", rownames(clinical_data[which(clinical_data$her2_status_by_ihc == "Positive"),]))
neg_her2 <- gsub("\\.","-", rownames(clinical_data[which(clinical_data$her2_status_by_ihc == "Negative"),]))
gene_expr_data <- as.data.frame(read_tsv("../../cancerproject/proj_090817/data/GSM1536837_06_01_15_TCGA_24.tumor_Rsubread_FeatureCounts.txt.gz"))
rownames(gene_expr_data) <- gene_expr_data$X1
gene_expr_data$X1 <- NULL
gene_expr_data <- as.data.frame(t(gene_expr_data))
pos_her2_expr <- gene_expr_data[which(rownames(gene_expr_data) %in% pos_her2),]
pos_her2_expr$her2_status_by_ihc <- "Positive"
neg_her2_expr <- gene_expr_data[which(rownames(gene_expr_data) %in% neg_her2),]
neg_her2_expr$her2_status_by_ihc <- "Negative"
total_her2_expr <- rbind(pos_her2_expr, neg_her2_expr)
colnames(total_her2_expr) <- make.names(colnames(total_her2_expr))
training.her2_expression <- sample(seq_len(nrow(total_her2_expr)), nrow(total_her2_expr) / 2)
training.ids <- c(sample(pos_her2, 150), sample(neg_her2, 150))
nrow(total_her2_expr[-which(row.names(total_her2_expr) %in% training.ids),])
as.numeric(total_her2_expr[training.ids, 'her2_status_by_ihc'] == "Positive")
plot(MED1 ~ GRB7, pch = ifelse(her2_status_by_ihc == "Positive", 16, 17), col = ifelse(her2_status_by_ihc == "Positive", "red", "green"), data = total_her2_expr[training.ids, ])
plot(STARD3 ~ GRB7, pch = ifelse(her2_status_by_ihc == "Positive", 16, 17), col = ifelse(her2_status_by_ihc == "Positive", "red", "green"), data = total_her2_expr[training.ids, ])
plot(MED1 ~ STARD3, pch = ifelse(her2_status_by_ihc == "Positive", 16, 17), col = ifelse(her2_status_by_ihc == "Positive", "red", "green"), data = total_her2_expr[training.ids, ])
#classif.svm <- makeLearner("classif.svm", predict.type = "prob")
#task_her2 <- makeClassifTask(data = total_her2_expr, target = "her2_status_by_ihc")
##IMPORTANT: create training set
#model_her2 <- train(classif.svm, task_her2, subset = training.her2_expression)
total_her2_expr$her2_status_by_ihc.numeric <- as.factor(total_her2_expr$her2_status_by_ihc == "Positive")
temp <- total_her2_expr[, -which(!(names(total_her2_expr) %in% c('MED1', 'STARD3', 'her2_status_by_ihc.numeric')))]
task <- makeClassifTask(data = temp, target = "her2_status_by_ihc.numeric")
svm.lrnr <- makeLearner("classif.svm", kernel = "linear")
svm.model <- train(svm.lrnr, task, subset = which(row.names(temp) %in% training.ids))
svm.pred <- predict(svm.model, task = task, subset = which(!(row.names(temp) %in% training.ids)))
performance(svm.pred, measures = list(mmce, acc))
plotLearnerPrediction(learner = makeLearner("classif.svm", kernel = "linear"), task = task)
svm.lrnr <- makeLearner("classif.svm", kernel = "polynomial")
svm.model <- train(svm.lrnr, task, subset = which(row.names(temp) %in% training.ids))
svm.pred <- predict(svm.model, task = task, subset = which(!(row.names(temp) %in% training.ids)))
performance(svm.pred, measures = list(mmce, acc))
plotLearnerPrediction(learner = makeLearner("classif.svm", kernel = "polynomial"), task = task)
svm.lrnr <- makeLearner("classif.svm", kernel = "radial")
svm.model <- train(svm.lrnr, task, subset = which(row.names(temp) %in% training.ids))
svm.pred <- predict(svm.model, task = task, subset = which(!(row.names(temp) %in% training.ids)))
performance(svm.pred, measures = list(mmce, acc))
plotLearnerPrediction(learner = makeLearner("classif.svm", kernel = "radial"), task = task)
#svm.model <- svm(her2_status_by_ihc.numeric ~ ., data = total_her2_expr[training.ids, c('SOD2', 'FOS', 'ANXA1', 'BCL6', 'EGR1', 'her2_status_by_ihc.numeric') ], cost = 100, gamma = 1)
temp <- total_her2_expr[, -which(!(names(total_her2_expr) %in% c('GRB7', 'STARD3', 'her2_status_by_ihc')))]
task <- makeClassifTask(data = temp, target = "her2_status_by_ihc")
svm.lrnr <- makeLearner("classif.svm", kernel = "linear")
svm.model <- train(svm.lrnr, task, subset = which(row.names(temp) %in% training.ids))
svm.pred <- predict(svm.model, task = task, subset = which(!(row.names(temp) %in% training.ids)))
performance(svm.pred, measures = list(mmce, acc))
plotLearnerPrediction(learner = svm.lrnr, task = task)
svm.lrnr <- makeLearner("classif.svm", kernel = "polynomial")
svm.model <- train(svm.lrnr, task, subset = which(row.names(temp) %in% training.ids))
svm.pred <- predict(svm.model, task = task, subset = which(!(row.names(temp) %in% training.ids)))
performance(svm.pred, measures = list(mmce, acc))
plotLearnerPrediction(learner = svm.lrnr, task = task)
svm.lrnr <- makeLearner("classif.svm", kernel = "radial")
svm.model <- train(svm.lrnr, task, subset = which(row.names(temp) %in% training.ids))
svm.pred <- predict(svm.model, task = task, subset = which(!(row.names(temp) %in% training.ids)))
performance(svm.pred, measures = list(mmce, acc))
plotLearnerPrediction(learner = svm.lrnr, task = task)
temp <- total_her2_expr[, -which(!(names(total_her2_expr) %in% c('GRB7', 'MED1', 'her2_status_by_ihc.numeric')))]
task <- makeClassifTask(data = temp, target = "her2_status_by_ihc.numeric")
svm.lrnr <- makeLearner("classif.svm", kernel = "linear")
svm.model <- train(svm.lrnr, task, subset = which(row.names(temp) %in% training.ids))
svm.pred <- predict(svm.model, task = task, subset = which(!(row.names(temp) %in% training.ids)))
performance(svm.pred, measures = list(mmce, acc))
plotLearnerPrediction(learner = makeLearner("classif.svm", kernel = "linear"), task = task)
svm.lrnr <- makeLearner("classif.svm", kernel = "polynomial")
svm.model <- train(svm.lrnr, task, subset = which(row.names(temp) %in% training.ids))
svm.pred <- predict(svm.model, task = task, subset = which(!(row.names(temp) %in% training.ids)))
performance(svm.pred, measures = list(mmce, acc))
plotLearnerPrediction(learner = makeLearner("classif.svm", kernel = "polynomial"), task = task)
svm.lrnr <- makeLearner("classif.svm", kernel = "radial")
svm.model <- train(svm.lrnr, task, subset = which(row.names(temp) %in% training.ids))
svm.pred <- predict(svm.model, task = task, subset = which(!(row.names(temp) %in% training.ids)))
performance(svm.pred, measures = list(mmce, acc))
plotLearnerPrediction(learner = makeLearner("classif.svm", kernel = "radial"), task = task)
temp <- total_her2_expr[, -which(!(names(total_her2_expr) %in% c('ERBB2', 'FGFR1', 'her2_status_by_ihc.numeric')))]
task <- makeClassifTask(data = temp, target = "her2_status_by_ihc.numeric")
svm.lrnr <- makeLearner("classif.svm", kernel = "linear")
svm.model <- train(svm.lrnr, task, subset = which(row.names(temp) %in% training.ids))
svm.pred <- predict(svm.model, task = task, subset = which(!(row.names(temp) %in% training.ids)))
performance(svm.pred, measures = list(mmce, acc))
plotLearnerPrediction(learner = makeLearner("classif.svm", kernel = "linear"), task = task)
svm.lrnr <- makeLearner("classif.svm", kernel = "polynomial")
svm.model <- train(svm.lrnr, task, subset = which(row.names(temp) %in% training.ids))
svm.pred <- predict(svm.model, task = task, subset = which(!(row.names(temp) %in% training.ids)))
performance(svm.pred, measures = list(mmce, acc))
plotLearnerPrediction(learner = makeLearner("classif.svm", kernel = "polynomial"), task = task)
svm.lrnr <- makeLearner("classif.svm", kernel = "radial")
svm.model <- train(svm.lrnr, task, subset = which(row.names(temp) %in% training.ids))
svm.pred <- predict(svm.model, task = task, subset = which(!(row.names(temp) %in% training.ids)))
performance(svm.pred, measures = list(mmce, acc))
plotLearnerPrediction(learner = makeLearner("classif.svm", kernel = "radial"), task = task)
temp <- total_her2_expr[, -which(!(names(total_her2_expr) %in% c('ERBB2', 'MED1', 'her2_status_by_ihc.numeric')))]
task <- makeClassifTask(data = temp, target = "her2_status_by_ihc.numeric")
svm.lrnr <- makeLearner("classif.svm", kernel = "linear")
svm.model <- train(svm.lrnr, task, subset = which(row.names(temp) %in% training.ids))
svm.pred <- predict(svm.model, task = task, subset = which(!(row.names(temp) %in% training.ids)))
performance(svm.pred, measures = list(mmce, acc))
plotLearnerPrediction(learner = makeLearner("classif.svm", kernel = "linear"), task = task)
svm.lrnr <- makeLearner("classif.svm", kernel = "polynomial")
svm.model <- train(svm.lrnr, task, subset = which(row.names(temp) %in% training.ids))
svm.pred <- predict(svm.model, task = task, subset = which(!(row.names(temp) %in% training.ids)))
performance(svm.pred, measures = list(mmce, acc))
plotLearnerPrediction(learner = makeLearner("classif.svm", kernel = "polynomial"), task = task)
svm.lrnr <- makeLearner("classif.svm", kernel = "radial")
svm.model <- train(svm.lrnr, task, subset = which(row.names(temp) %in% training.ids))
svm.pred <- predict(svm.model, task = task, subset = which(!(row.names(temp) %in% training.ids)))
performance(svm.pred, measures = list(mmce, acc))
plotLearnerPrediction(learner = makeLearner("classif.svm", kernel = "radial"), task = task)
temp <- total_her2_expr[, -which(!(names(total_her2_expr) %in% c('ERBB2', 'GRB7', 'her2_status_by_ihc.numeric')))]
task <- makeClassifTask(data = temp, target = "her2_status_by_ihc.numeric")
svm.lrnr <- makeLearner("classif.svm", kernel = "linear")
svm.model <- train(svm.lrnr, task, subset = which(row.names(temp) %in% training.ids))
svm.pred <- predict(svm.model, task = task, subset = which(!(row.names(temp) %in% training.ids)))
performance(svm.pred, measures = list(mmce, acc))
plotLearnerPrediction(learner = makeLearner("classif.svm", kernel = "linear"), task = task)
svm.lrnr <- makeLearner("classif.svm", kernel = "polynomial")
svm.model <- train(svm.lrnr, task, subset = which(row.names(temp) %in% training.ids))
svm.pred <- predict(svm.model, task = task, subset = which(!(row.names(temp) %in% training.ids)))
performance(svm.pred, measures = list(mmce, acc))
plotLearnerPrediction(learner = makeLearner("classif.svm", kernel = "polynomial"), task = task)
svm.lrnr <- makeLearner("classif.svm", kernel = "radial")
svm.model <- train(svm.lrnr, task, subset = which(row.names(temp) %in% training.ids))
svm.pred <- predict(svm.model, task = task, subset = which(!(row.names(temp) %in% training.ids)))
performance(svm.pred, measures = list(mmce, acc))
plotLearnerPrediction(learner = makeLearner("classif.svm", kernel = "radial"), task = task)
svm.pred
svm.pred$data
svm.pred$data[where(svm.pred$data$truth != svm.pred$data$response),]
svm.pred$data[which(svm.pred$data$truth != svm.pred$data$response),]
misclassied <-  row.names(svm.pred$data[which(svm.pred$data$truth != svm.pred$data$response),])
misclassied
misclassied <- svm.pred$data[which(svm.pred$data$truth != svm.pred$data$response),]
misclassied.ids <-  row.names(misclassied)
misclassied.ids
install.packages("scatterplot3d")
library(scatterplot3d)
?cubedraw
crgb <- t(col2rgb(cc <- colors()))
crgb
cubedraw <- function(res3d, min = 0, max = 255, cex = 2)
{
cube01 <- rbind(0,c(1,0,0),c(1,1,0),1,c(0,1,1),c(0,0,1),c(1,0,1),
c(1,0,0),c(1,0,1),1,c(1,1,0),
c(0,1,0),c(0,1,1), c(0,1,0),0)
cub <- min + (max-min)* cube01
res3d$points3d(cub[ 1:11,], cex = cex, type = 'b', lty = 1)
res3d$points3d(cub[11:15,], cex = cex, type = 'b', lty = 3)
}
rr <- scatterplot3d(crgb, color = cc, box = F, angle = 24)
cubedraw
cubedraw(rr)
crgb
total_her2_expr[which(row.names(total_her2_expr) %in% misclassied.ids),]
misclassied.data <- total_her2_expr[which(row.names(total_her2_expr) %in% misclassied.ids),]
cubedraw <- function(res3d, min = 0, max = 255, cex = 2)
{
cube01 <- rbind(0,c(1,0,0),c(1,1,0),1,c(0,1,1),c(0,0,1),c(1,0,1),
c(1,0,0),c(1,0,1),1,c(1,1,0),
c(0,1,0),c(0,1,1), c(0,1,0),0)
cub <- min + (max-min)* cube01
res3d$points3d(cub[ 1:11,], cex = cex, type = 'b', lty = 1)
res3d$points3d(cub[11:15,], cex = cex, type = 'b', lty = 3)
}
for (i in 1:20){
print(names(misclassied.data)[c(i, i + 1, i + 2)])
s3d <- scatterplot3d(misclassied.data[,c(i, i + 1, i + 2)], color = cc, box = T, angle = 24)
}
cubedraw <- function(res3d, min = 0, max = 255, cex = 2)
{
cube01 <- rbind(0,c(1,0,0),c(1,1,0),1,c(0,1,1),c(0,0,1),c(1,0,1),
c(1,0,0),c(1,0,1),1,c(1,1,0),
c(0,1,0),c(0,1,1), c(0,1,0),0)
cub <- min + (max-min)* cube01
res3d$points3d(cub[ 1:11,], cex = cex, type = 'b', lty = 1)
res3d$points3d(cub[11:15,], cex = cex, type = 'b', lty = 3)
}
for (i in 1:20){
print(names(misclassied.data)[c(i, i + 1, i + 2)])
s3d <- scatterplot3d(misclassied.data[,c(i, i + 1, i + 2)], box = T, angle = 24)
}
cubedraw <- function(res3d, min = 0, max = 255, cex = 2)
{
cube01 <- rbind(0,c(1,0,0),c(1,1,0),1,c(0,1,1),c(0,0,1),c(1,0,1),
c(1,0,0),c(1,0,1),1,c(1,1,0),
c(0,1,0),c(0,1,1), c(0,1,0),0)
cub <- min + (max-min)* cube01
res3d$points3d(cub[ 1:11,], cex = cex, type = 'b', lty = 1)
res3d$points3d(cub[11:15,], cex = cex, type = 'b', lty = 3)
}
for (i in 1:20){
print(names(misclassied.data)[c(i, i + 1, i + 2)])
s3d <- scatterplot3d(misclassied.data[,c(i, i + 1, i + 2)], pch = 16, color = "blue", box = T, angle = 24)
}
cubedraw <- function(res3d, min = 0, max = 255, cex = 2)
{
cube01 <- rbind(0,c(1,0,0),c(1,1,0),1,c(0,1,1),c(0,0,1),c(1,0,1),
c(1,0,0),c(1,0,1),1,c(1,1,0),
c(0,1,0),c(0,1,1), c(0,1,0),0)
cub <- min + (max-min)* cube01
res3d$points3d(cub[ 1:11,], cex = cex, type = 'b', lty = 1)
res3d$points3d(cub[11:15,], cex = cex, type = 'b', lty = 3)
}
for (i in 1:20){
print(names(misclassied.data)[c(i, i + 1, i + 2)])
s3d <- scatterplot3d(misclassied.data[,c(i, i + 1, i + 2)], pch = 16, color = "blue",
type = "h", box = T, angle = 24)
}
misclassied.data
misclassied
row.names(misclassied.data)
colors <- c("#E69F00", "#56B4E9")
colors <- colors[as.numeric(misclassied$truth)]
for (i in 1:20){
print(names(misclassied.data)[c(i, i + 1, i + 2)])
s3d <- scatterplot3d(misclassied.data[,c(i, i + 1, i + 2)], pch = 16, color = colors,
type = "h", box = T, angle = 24)
}
colors <- c("#E69F00", "#56B4E9")
colors <- colors[as.numeric(misclassied$truth)]
for (i in 1:20){
print(names(misclassied.data)[c(i, i + 1, i + 2)])
s3d <- scatterplot3d(misclassied.data[,c(i, i + 1, i + 2)], pch = 16, color = colors,
type = "h", box = T, angle = 55)
}
ncol(misclassied)
ncol(misclassied.data)
misclassied.data
misclassied.data$truth <- misclassied$truth
misclassied.data$truth
misclassied.data[['truth']]
pull(misclassied.data, truth)
row.names(misclassied.data)
misclassied
colors <- c("#E69F00", "#56B4E9")
colors <- colors[as.numeric(misclassied$truth)]
misclassied.data$truth <- misclassied$truth
for (i in 1:20){
print(names(misclassied.data)[c(i, i + 1, i + 2)])
s3d <- scatterplot3d(misclassied.data[,c(i, i + 1, i + 2)], pch = 16, color = colors,
type = "h", box = T, angle = 55)
mini.task = makeClassifTaskDesc(data = misclassied.data[,c(i, i +1, i + 2)], target = "truth")
plotLearnerPrediction(makeLearner("classif.svm", kernel = "radial"), task = mini.task)
}
?makeClassifTaskDesc
colors <- c("#E69F00", "#56B4E9")
colors <- colors[as.numeric(misclassied$truth)]
misclassied.data$truth <- misclassied$truth
for (i in 1:20){
print(names(misclassied.data)[c(i, i + 1, i + 2)])
s3d <- scatterplot3d(misclassied.data[,c(i, i + 1, i + 2)], pch = 16, color = colors,
type = "h", box = T, angle = 55)
mini.task = makeClassifTask(data = misclassied.data[,c(i, i +1, i + 2)], target = "truth")
plotLearnerPrediction(makeLearner("classif.svm", kernel = "radial"), task = mini.task)
}
colors <- c("#E69F00", "#56B4E9")
colors <- colors[as.numeric(misclassied$truth)]
misclassied.data$truth <- misclassied$truth
for (i in 1:20){
print(names(misclassied.data)[c(i, i + 1, i + 2)])
s3d <- scatterplot3d(misclassied.data[,c(i, i + 1, i + 2)], pch = 16, color = colors,
type = "h", box = T, angle = 55)
mini.task = makeClassifTask(data = misclassied.data[,c(i, i +1, i + 2, "truth")], target = "truth")
plotLearnerPrediction(makeLearner("classif.svm", kernel = "radial"), task = mini.task)
}
colors <- c("#E69F00", "#56B4E9")
colors <- colors[as.numeric(misclassied$truth)]
misclassied.data$truth <- misclassied$truth
for (i in 1:20){
print(names(misclassied.data)[c(i, i + 1, i + 2)])
s3d <- scatterplot3d(misclassied.data[,c(i, i + 1, i + 2)], pch = 16, color = colors,
type = "h", box = T, angle = 55)
mini.task = makeClassifTask(data = misclassied.data[,c(i, i +1, i + 2, ncol(misclassied.data))], target = "truth")
plotLearnerPrediction(makeLearner("classif.svm", kernel = "radial"), task = mini.task)
}
colors <- c("#E69F00", "#56B4E9")
colors <- colors[as.numeric(misclassied$truth)]
misclassied.data$truth <- misclassied$truth
for (i in 1:20){
print(names(misclassied.data)[c(i, i + 1, i + 2)])
s3d <- scatterplot3d(misclassied.data[,c(i, i + 1, i + 2)], pch = 16, color = colors,
type = "h", box = T, angle = 55)
mini.task = makeClassifTask(data = misclassied.data[,c(i, i +1, i + 2, ncol(misclassied.data))], target = "truth")
plotLearnerPrediction(makeLearner("classif.svm", kernel = "radial"), task = mini.task, cv = 6)
}
colors <- c("#E69F00", "#56B4E9")
colors <- colors[as.numeric(misclassied$truth)]
misclassied.data$truth <- misclassied$truth
for (i in 1:20){
print(names(misclassied.data)[c(i, i + 1, i + 2)])
s3d <- scatterplot3d(misclassied.data[,c(i, i + 1, i + 2)], pch = 16, color = colors,
type = "h", box = T, angle = 55)
mini.task = makeClassifTask(data = misclassied.data[,c(i, i +1, i + 2, ncol(misclassied.data))], target = "truth")
plotLearnerPrediction(makeLearner("classif.svm", kernel = "radial"), task = mini.task, cv = 0)
}
colors <- c("#E69F00", "#56B4E9")
colors <- colors[as.numeric(misclassied$truth)]
misclassied.data$truth <- misclassied$truth
for (i in 1:20){
print(names(misclassied.data)[c(i, i + 1, i + 2)])
#s3d <- scatterplot3d(misclassied.data[,c(i, i + 1, i + 2)], pch = 16, color = colors,
#                     type = "h", box = T, angle = 55)
mini.task = makeClassifTask(data = misclassied.data[,c(i, i +1, i + 2, ncol(misclassied.data))], target = "truth")
plotLearnerPrediction(makeLearner("classif.svm", kernel = "radial"), task = mini.task, cv = 0)
}
plotLearnerPrediction(makeLearner("classif.svm", kernel = "radial"), task = mini.task, cv = 0)
colors <- c("#E69F00", "#56B4E9")
colors <- colors[as.numeric(misclassied$truth)]
misclassied.data$truth <- misclassied$truth
for (i in 1:20){
print(names(misclassied.data)[c(i, i + 1, i + 2)])
#s3d <- scatterplot3d(misclassied.data[,c(i, i + 1, i + 2)], pch = 16, color = colors,
#                     type = "h", box = T, angle = 55)
mini.task = makeClassifTask(data = misclassied.data[,c(i, i +1, i + 2, ncol(misclassied.data))], target = "truth")
print(plotLearnerPrediction(makeLearner("classif.svm", kernel = "radial"), task = mini.task, cv = 0))
}
colors <- c("#E69F00", "#56B4E9")
colors <- colors[as.numeric(misclassied$truth)]
misclassied.data$truth <- misclassied$truth
for (i in 1:20){
#print(names(misclassied.data)[c(i, i + 1, i + 2)])
#s3d <- scatterplot3d(misclassied.data[,c(i, i + 1, i + 2)], pch = 16, color = colors,
#                     type = "h", box = T, angle = 55)
mini.task = makeClassifTask(data = misclassied.data[,c(i, i +1, i + 2, ncol(misclassied.data))], target = "truth")
print(plotLearnerPrediction(makeLearner("classif.svm", kernel = "radial"), task = mini.task, cv = 0))
}
ncol(misclassied.data)
